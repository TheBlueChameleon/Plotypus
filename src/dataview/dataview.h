#ifndef DATAVIEW_H
#define DATAVIEW_H

#include <string>

#include "../definitions/constants.h"

namespace Plotypus
{
    class DataView
    {
        protected:
            PlotStyle2D styleID;

            std::string label;
            std::string style;
            std::string options = "";
            mutable std::string dataFilename = "";

            int  numberPrecision = 6;           // used only in txt output

            std::string columnSeparatorTxt = "\t";
            std::string columnSeparatorDat = "\t";

            bool binaryDataOutput = true;
            bool autoGenerateDataFilename = true;

            columnAssignmentList_t columnAssignments = {COLUMN_UNUSED, COLUMN_UNUSED, COLUMN_UNUSED, COLUMN_UNUSED, COLUMN_UNUSED, COLUMN_UNUSED};
            columnFormatList_t     columnFormats     = {COLUMN_FORMAT_DEFAULT, COLUMN_FORMAT_DEFAULT, COLUMN_FORMAT_DEFAULT, COLUMN_FORMAT_DEFAULT, COLUMN_FORMAT_DEFAULT, COLUMN_FORMAT_DEFAULT};

            virtual void clearFunctionMembers() = 0;
            virtual void clearNonFunctionMembers() = 0;

        public:
            DataView(const PlotStyle2D  style, const std::string& label = "");
            DataView(const std::string& style, const std::string& label = "");

            virtual void reset();

            const std::string&  getLabel() const;
            void                setLabel(const std::string& newLabel);

            const std::string&  getStyle() const;
            void                setStyle(const std::string& newStyle);

            const PlotStyle2D   getStyleID() const;
            void                setStyleID(const PlotStyle2D newStyle);

            bool                getBinaryDataOutput() const;
            void                setBinaryDataOutput(bool newBinaryDataOutput);

            const std::string&  getOptions() const;
            void                setOptions(const std::string& newOptions);

            bool                getAutoGenerateDataFilename() const;
            void                setAutoGenerateDataFilename(bool newAutoGenerateDataFilename);
            const std::string&  getDataFilename() const;
            void                setDataFilename(const std::string& newDataFilename) const;

            int                 getNumberPrecision() const;
            void                setNumberPrecision(int newNumberPrecision);

            const std::string&  getColumnSeparatorTxt() const;
            void                setColumnSeparatorTxt(const std::string& newSeparatorTXT);
            const std::string&  getColumnSeparatorDat() const;
            void                setColumnSeparatorDat(const std::string& newSeparatorDAT);

            size_t&             columnAssignment(const size_t       columnID);
            size_t&             columnAssignment(const ColumnTypes  columnType);
            std::string&        columnFormat    (const size_t       columnID);
            std::string&        columnFormat    (const ColumnTypes  columnType);

            virtual bool isFunction() const = 0;
            virtual bool isDummy() const = 0;
            virtual bool isComplete() const = 0;

            virtual size_t getColumnID(const ColumnTypes columnType) const = 0;

            // -------------------------------------------------------------- //
            // writers

            virtual void writeDatData() const = 0;
            virtual void writeScriptData(std::ostream& hFile) const = 0;
    };
}

#endif // DATAVIEW_H
