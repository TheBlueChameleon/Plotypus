#include "../base/util.h"

#include "dataview.h"

using namespace Plotypus;

namespace Plotypus
{
    DataView::DataView(const PlotStyle2D style, const std::string& label) :
        label(label)
    {
        setStyleID(style);
    }

    DataView::DataView(const std::string& style, const std::string& label) :
        label(label), style(style), styleID(PlotStyle2D::Custom)
    {}

    void DataView::reset()
    {
        styleID                     = PlotStyle2D::Custom;
        label                       = "";
        style                       = "lines";
        options                     = "";
        dataFilename                = "";
        numberPrecision             = 6;
        columnSeparatorTxt          = "\t";
        columnSeparatorDat          = "\t";
        binaryDataOutput            = true;
        autoGenerateDataFilename    = true;

        columnAssignments = {COLUMN_UNUSED, COLUMN_UNUSED, COLUMN_UNUSED, COLUMN_UNUSED, COLUMN_UNUSED, COLUMN_UNUSED};
    }

    const std::string& DataView::getLabel() const
    {
        return label;
    }

    void DataView::setLabel(const std::string& newLabel)
    {
        label = newLabel;
    }

    const std::string& DataView::getStyle() const
    {
        return style;
    }

    void DataView::setStyle(const std::string& newStyle)
    {
        styleID = PlotStyle2D::Custom;
        style = newStyle;
    }

    const PlotStyle2D DataView::getStyleID() const
    {
        return styleID;
    }

    void DataView::setStyleID(const PlotStyle2D newStyle)
    {
        styleID = newStyle;
        style = getPlotStyleName(newStyle);

        if (newStyle == PlotStyle2D::HBoxes)
        {
            columnFormats[0] = "(0)";               // x     : constant zero
            columnFormats[1] = "$!1";               // y     : x column
            columnFormats[2] = "(0)";               // x_low : constant zero
            columnFormats[3] = "$!2";               // x_high: y column
            columnFormats[4] = "($!1 - $!3 / 2.)";  // y_low : x column minus boxwidth halves
            columnFormats[5] = "($!1 - $!3 / 2.)";  // y_high: x column plus boxwidth halves
        }
    }

    bool DataView::getBinaryDataOutput() const
    {
        return binaryDataOutput;
    }

    void DataView::setBinaryDataOutput(bool newBinaryDataOutput)
    {
        binaryDataOutput = newBinaryDataOutput;
    }

    const std::string& DataView::getOptions() const
    {
        return options;
    }

    void DataView::setOptions(const std::string& newOptions)
    {
        options = newOptions;
    }

    const std::string& DataView::getDataFilename() const
    {
        return dataFilename;
    }

    void DataView::setDataFilename(const std::string& newDataFilename) const
    {
        checkFilename("data output filename", newDataFilename);
        dataFilename = newDataFilename;
    }

    bool DataView::getAutoGenerateDataFilename() const
    {
        return autoGenerateDataFilename;
    }

    void DataView::setAutoGenerateDataFilename(bool newAutoGenerateDataFilename)
    {
        autoGenerateDataFilename = newAutoGenerateDataFilename;
    }

    int DataView::getNumberPrecision() const
    {
        return numberPrecision;
    }

    void DataView::setNumberPrecision(int newNumberPrecision)
    {
        numberPrecision = newNumberPrecision;
    }

    const std::string& DataView::getColumnSeparatorTxt() const
    {
        return columnSeparatorTxt;
    }

    void DataView::setColumnSeparatorTxt(const std::string& newSeparatorTXT)
    {
        columnSeparatorTxt = newSeparatorTXT;
    }

    const std::string& DataView::getColumnSeparatorDat() const
    {
        return columnSeparatorDat;
    }

    void DataView::setColumnSeparatorDat(const std::string& newSeparatorDAT)
    {
        columnSeparatorDat = newSeparatorDAT;
    }

    size_t& DataView::columnAssignment(const size_t columnID)
    {
        return columnAssignments.at(columnID);
    }

    size_t& DataView::columnAssignment(const ColumnTypes columnType)
    {
        return columnAssignment(getColumnID(columnType) - 1);
    }

    std::string& DataView::columnFormat(const size_t columnID)
    {
        return columnFormats.at(columnID);
    }

    std::string& DataView::columnFormat(const ColumnTypes columnType)
    {
        return columnFormat(getColumnID(columnType) - 1);
    }
}
